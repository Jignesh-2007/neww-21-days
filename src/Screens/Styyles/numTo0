import { Text, StyleSheet, View, Button } from "react-native"
import React, { useState } from 'react'

const App = () => {
  var a = 0
  const [name, setName] = useState(0)

  const UpdateValue = () => {
    setName(name + 1)
  }

const UpdateValu = () => {
  if (name > 0) {
    setName(name - 1)
  }
}


  return (
    <View style={{ alignItems: 'center', flex: 1, justifyContent: 'center' }}>

      <Text style={{ fontWeight: "bold", fontSize: 25, color: 'red', lineHeight: 80 }}>{name}</Text>
      <Button title='Click Next Number: ' onPress={() => UpdateValue()} />

      <Button title='Click Prev Number: ' onPress={() => UpdateValu()} />




    </View>
  )
}

export default App




import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ImageBackground,
  TouchableOpacity,
  ScrollView,
  FlatList,
  SafeAreaView,
  Image, 
} from 'react-native';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import Ionicons from 'react-native-vector-icons/Ionicons';
import auth from '@react-native-firebase/auth';
import database from '@react-native-firebase/database';

const initialCategories = [
  { id: '1', name: 'Work', screen: 'Work', color: '#1f2a47', icon: 'briefcase-outline', iconColor: '#33ffff' },
  { id: '2', name: 'School', screen: 'School', color: '#2c1d42', icon: 'school-outline', iconColor: '#ff33ff' },
  { id: '3', name: 'Sport', screen: 'Sport', color: '#1a3a3a', icon: 'barbell-outline', iconColor: '#39ff14' },
  { id: '4', name: 'Music', screen: 'Music', color: '#3d243c', icon: 'musical-notes-outline', iconColor: '#f7b3ff' },
];

const HomeScreen = ({ navigation }) => {
  const [userName, setUserName] = useState('User');
  const [profilePicUrl, setProfilePicUrl] = useState(null); 
  const [completionPercentage, setCompletionPercentage] = useState(0);
  const [categories, setCategories] = useState(initialCategories.map(cat => ({ ...cat, taskCount: 0 })));
  
  useEffect(() => {
    const authSubscriber = auth().onAuthStateChanged((user) => {
      if (user) {
        // --- User is signed in, get their profile data ---
        const profileRef = database().ref(`/users/${user.uid}/profile`);
        const onProfileValueChange = profileRef.on('value', snapshot => {
          const userData = snapshot.val();
          if (userData) {
            setUserName(userData.username || 'User');
            setProfilePicUrl(userData.profilePicUrl); // <-- Profile pic URL set kela
          }
        });

        // --- Listen to all of the user's tasks in real-time ---
        const tasksRef = database().ref(`/users/${user.uid}/tasks`);
        const onTasksValueChange = tasksRef.on('value', snapshot => {
          const tasksData = snapshot.val();
          
          if (tasksData) {
            const allTasks = Object.values(tasksData);
            
            let totalCompleted = 0;
            const newCategoryData = initialCategories.map(category => {
                const tasksForCategory = allTasks.filter(task => task.category === category.name);
                const completedInCategory = tasksForCategory.filter(task => task.completed).length;
                totalCompleted += completedInCategory;
                return {
                    ...category,
                    taskCount: tasksForCategory.length,
                };
            });

            setCategories(newCategoryData);
            const totalTasks = allTasks.length;
            setCompletionPercentage(totalTasks > 0 ? Math.round((totalCompleted / totalTasks) * 100) : 0);

          } else {
            setCategories(initialCategories.map(cat => ({ ...cat, taskCount: 0 })));
            setCompletionPercentage(0);
          }
        });

        return () => {
          profileRef.off('value', onProfileValueChange);
          tasksRef.off('value', onTasksValueChange);
        };

      } else {
        setUserName('Guest');
        setProfilePicUrl(null); // <-- User sign out zalyavar URL clear kela
        setCategories(initialCategories.map(cat => ({ ...cat, taskCount: 0 })));
        setCompletionPercentage(0);
      }
    });

    return authSubscriber;
  }, []);

  const totalTasks = categories.reduce((sum, category) => sum + category.taskCount, 0);
  const avatarLetter = userName.charAt(0).toUpperCase();

  // --- Navigation Functions ---
  const navigateToProfile = () => navigation.navigate('Profile');
  const navigateToProgress = () => navigation.navigate('Progress');
  const navigateToNewTask = () => navigation.navigate('Newtask');
  const navigateToFocus = () => navigation.navigate('Focus');
  const navigateToCategory = (screenName) => navigation.navigate(screenName);

  return (
    <SafeAreaView style={styles.safeArea}>
      <ImageBackground
        source={require('../../assets/neonn.jpg')}
        style={{ flex: 1 }}
        imageStyle={{ opacity: 0.7 }}
        resizeMode='cover'
      >
        <ScrollView style={styles.scrollView}>
          <View style={styles.container}>
            {/* --- Header --- */}
            <View style={styles.header}>
              <Text style={styles.headerTitle}>Hey {userName}!</Text>
              <TouchableOpacity onPress={navigateToProfile}>
                {/* ================================================================= */}
                {/* --- UI UPDATE --- */}
                {/* Ithe ata profile image disel */}
                {/* ================================================================= */}
                <View style={styles.avatar}>
                    {profilePicUrl ? (
                        <Image source={{ uri: profilePicUrl }} style={styles.profileImage} />
                    ) : (
                        <Text style={styles.avatarText}>{avatarLetter}</Text>
                    )}
                </View>
              </TouchableOpacity>
            </View>

            {/* --- Task Card --- */}
            <View style={styles.taskCard}>
              <View>
                <Text style={styles.taskCardTitle}>
                  {totalTasks > 0
                    ? `${totalTasks} Task${totalTasks > 1 ? 's' : ''} for today`
                    : 'No tasks for today'}
                </Text>
                <TouchableOpacity style={styles.viewButton} onPress={navigateToProgress}>
                  <Text style={styles.viewButtonText}>View Tasks</Text>
                </TouchableOpacity>
              </View>
              <View style={styles.progressCircle}>
                <Text style={styles.percentText}>{completionPercentage}%</Text>
              </View>
            </View>

            {/* --- Categories --- */}
            <Text style={styles.sectionTitle}>Categories</Text>
            <FlatList
              data={categories}
              horizontal
              showsHorizontalScrollIndicator={false}
              renderItem={({ item }) => (
                <TouchableOpacity 
                  onPress={() => navigateToCategory(item.screen)}
                  style={[styles.categoryCard, { backgroundColor: item.color, shadowColor: item.iconColor, borderColor: item.iconColor }]}
                >
                  <Ionicons name={item.icon} size={30} color={item.iconColor} style={[styles.iconShadow, { shadowColor: item.iconColor }]} />
                  <Text style={[styles.categoryTitle, { color: item.iconColor, textShadowColor: item.iconColor }]}>{item.name}</Text>
                  <Text style={[styles.categoryTasks, { color: item.iconColor, textShadowColor: 'transparent' }]}>{item.taskCount} Tasks</Text>
                </TouchableOpacity>
              )}
              keyExtractor={(item) => item.id}
            />

            <View style={styles.tasksHeaderRow}>
              <Text style={styles.sectionTitle}>All Tasks</Text>
              <TouchableOpacity onPress={navigateToProgress}>
                <Text style={styles.seeAllText}>See All</Text>
              </TouchableOpacity>
            </View>

            <Text style={styles.footerText}>
              {totalTasks === 0 ? "No tasks yet! Start your journey by adding your first goal â€” your future self will thank you." : "Keep up the great work!"}
            </Text>
          </View>
        </ScrollView>

        {/* --- Bottom Navbar --- */}
        <View style={styles.navbar}>
            <TouchableOpacity style={styles.navItem}>
              <Ionicons name="home" size={28} color="#33ffff" style={[styles.iconShadow, { shadowColor: '#33ffff' }]} />
              <Text style={[styles.navText, { color: '#33ffff' }]}>Home</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.navItem} onPress={navigateToProgress}>
              <MaterialCommunityIcons name="progress-check" size={28} color="#fff" />
              <Text style={styles.navText}>Progress</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.addButton} onPress={navigateToNewTask}>
              <Ionicons name="add" size={32} color="#0d1117" />
            </TouchableOpacity>
            <TouchableOpacity style={styles.navItem} onPress={navigateToFocus}>
              <Ionicons name="timer-outline" size={28} color="#fff" />
              <Text style={styles.navText}>Focus</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.navItem} onPress={navigateToProfile}>
              <Ionicons name="person-outline" size={28} color="#fff" />
              <Text style={styles.navText}>Profile</Text>
            </TouchableOpacity>
        </View>
      </ImageBackground>
    </SafeAreaView>
  );
};

const NEON_BLUE = '#33ffff';
const DARK_BG = '#0d1117'; 

const styles = StyleSheet.create({
  safeArea: { flex: 1, backgroundColor: DARK_BG },
  scrollView: { flex: 1 },
  container: { flex: 1, paddingHorizontal: 20, paddingBottom: 100 },
  header: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', paddingTop: 10, paddingBottom: 10 },
  headerTitle: { color: '#fff', fontSize: 28, fontFamily: 'Valorax-lg25V', textShadowColor: 'rgba(255, 255, 255, 0.3)', textShadowOffset: { width: 0, height: 0 }, textShadowRadius: 8 },
  avatar: { width: 40, height: 40, borderRadius: 20, backgroundColor: '#161b22', borderColor: NEON_BLUE, borderWidth: 1, justifyContent: 'center', alignItems: 'center', overflow: 'hidden' },
  profileImage: { width: '100%', height: '100%' },
  avatarText: { color: NEON_BLUE, fontSize: 20, fontWeight: 'bold' },
  taskCard: { backgroundColor: '#161b22', borderRadius: 20, padding: 20, marginTop: 20, flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', borderColor: NEON_BLUE, borderWidth: 1, shadowColor: NEON_BLUE, shadowOffset: { width: 0, height: 0 }, shadowOpacity: 0.8, shadowRadius: 10, elevation: 15 },
  taskCardTitle: { fontWeight: 'bold', fontSize: 19, color: '#fff' },
  viewButton: { backgroundColor: NEON_BLUE, paddingVertical: 8, paddingHorizontal: 16, borderRadius: 10, alignSelf: 'flex-start', marginTop: 10 },
  viewButtonText: { color: DARK_BG, fontWeight: 'bold' },
  progressCircle: { width: 70, height: 70, borderRadius: 35, borderWidth: 5, borderColor: NEON_BLUE, justifyContent: 'center', alignItems: 'center', shadowColor: NEON_BLUE, shadowOffset: { width: 0, height: 0 }, shadowOpacity: 1, shadowRadius: 10 },
  percentText: { color: '#fff', fontWeight: 'bold', fontSize: 16 },
  sectionTitle: { color: '#fff', fontSize: 20, fontWeight: 'bold', marginTop: 30, marginBottom: 10, textShadowColor: 'rgba(255, 255, 255, 0.3)', textShadowOffset: { width: 0, height: 0 }, textShadowRadius: 8 },
  categoryCard: { width: 130, height: 130, borderRadius: 15, marginRight: 15, padding: 15, justifyContent: 'space-between', alignItems: 'flex-start', borderWidth: 1.5, shadowOffset: { width: 0, height: 0 }, shadowOpacity: 0.9, shadowRadius: 8, elevation: 10 },
  categoryTitle: { fontSize: 18, fontWeight: 'bold', textShadowOffset: { width: 0, height: 0 }, textShadowRadius: 8 },
  categoryTasks: { fontSize: 14, opacity: 0.8 },
  tasksHeaderRow: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' },
  seeAllText: { color: NEON_BLUE, fontWeight: 'bold', fontSize: 19, marginTop: 10 },
  footerText: { color: '#a9a9a9', textAlign: 'center', marginTop: 40, paddingHorizontal: 20, fontSize: 14, lineHeight: 22 },
  navbar: { position: 'absolute', bottom: 10, left: 20, right: 20, height: 70, backgroundColor: '#161b22', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', borderRadius: 20, paddingHorizontal: 10, borderWidth: 1, borderColor: 'rgba(51, 255, 255, 0.3)' },
  navItem: { flex: 1, justifyContent: 'center', alignItems: 'center' },
  navText: { color: '#a9a9a9', fontSize: 12, marginTop: 4 },
  addButton: { backgroundColor: NEON_BLUE, width: 60, height: 60, borderRadius: 30, justifyContent: 'center', alignItems: 'center', bottom: 20, shadowColor: NEON_BLUE, shadowOffset: { width: 0, height: 5 }, shadowOpacity: 0.8, shadowRadius: 10, elevation: 10, borderColor: '#fff', borderWidth: 2 },
  iconShadow: { textShadowColor: NEON_BLUE, textShadowOffset: { width: 0, height: 0 }, textShadowRadius: 10 }
});

export default HomeScreen;
